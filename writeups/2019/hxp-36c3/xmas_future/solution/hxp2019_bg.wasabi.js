/*
 * Generated by Wasabi. DO NOT EDIT.
 * Contains:
 *   - independent of program-to-instrument: long.js dependency, Wasabi loader and runtime
 *   - generated from program-to-instrument: static information and low-level hooks
 */

// long.js
!function(t,i){"object"==typeof exports&&"object"==typeof module?module.exports=i():"function"==typeof define&&define.amd?define([],i):"object"==typeof exports?exports.Long=i():t.Long=i()}("undefined"!=typeof self?self:this,function(){return function(t){function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}var n={};return i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:e})},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p="",i(i.s=0)}([function(t,i){function n(t,i,n){this.low=0|t,this.high=0|i,this.unsigned=!!n}function e(t){return!0===(t&&t.__isLong__)}function r(t,i){var n,e,r;return i?(t>>>=0,(r=0<=t&&t<256)&&(e=l[t])?e:(n=h(t,(0|t)<0?-1:0,!0),r&&(l[t]=n),n)):(t|=0,(r=-128<=t&&t<128)&&(e=f[t])?e:(n=h(t,t<0?-1:0,!1),r&&(f[t]=n),n))}function s(t,i){if(isNaN(t))return i?p:m;if(i){if(t<0)return p;if(t>=c)return q}else{if(t<=-v)return _;if(t+1>=v)return E}return t<0?s(-t,i).neg():h(t%d|0,t/d|0,i)}function h(t,i,e){return new n(t,i,e)}function u(t,i,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return m;if("number"==typeof i?(n=i,i=!1):i=!!i,(n=n||10)<2||36<n)throw RangeError("radix");var e;if((e=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===e)return u(t.substring(1),i,n).neg();for(var r=s(a(n,8)),h=m,o=0;o<t.length;o+=8){var g=Math.min(8,t.length-o),f=parseInt(t.substring(o,o+g),n);if(g<8){var l=s(a(n,g));h=h.mul(l).add(s(f))}else h=h.mul(r),h=h.add(s(f))}return h.unsigned=i,h}function o(t,i){return"number"==typeof t?s(t,i):"string"==typeof t?u(t,i):h(t.low,t.high,"boolean"==typeof i?i:t.unsigned)}t.exports=n;var g=null;try{g=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=e;var f={},l={};n.fromInt=r,n.fromNumber=s,n.fromBits=h;var a=Math.pow;n.fromString=u,n.fromValue=o;var d=4294967296,c=d*d,v=c/2,w=r(1<<24),m=r(0);n.ZERO=m;var p=r(0,!0);n.UZERO=p;var y=r(1);n.ONE=y;var b=r(1,!0);n.UONE=b;var N=r(-1);n.NEG_ONE=N;var E=h(-1,2147483647,!1);n.MAX_VALUE=E;var q=h(-1,-1,!0);n.MAX_UNSIGNED_VALUE=q;var _=h(0,-2147483648,!1);n.MIN_VALUE=_;var B=n.prototype;B.toInt=function(){return this.unsigned?this.low>>>0:this.low},B.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},B.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(_)){var i=s(t),n=this.div(i),e=n.mul(i).sub(this);return n.toString(t)+e.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var r=s(a(t,6),this.unsigned),h=this,u="";;){var o=h.div(r),g=h.sub(o.mul(r)).toInt()>>>0,f=g.toString(t);if(h=o,h.isZero())return f+u;for(;f.length<6;)f="0"+f;u=""+f+u}},B.getHighBits=function(){return this.high},B.getHighBitsUnsigned=function(){return this.high>>>0},B.getLowBits=function(){return this.low},B.getLowBitsUnsigned=function(){return this.low>>>0},B.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,i=31;i>0&&0==(t&1<<i);i--);return 0!=this.high?i+33:i+1},B.isZero=function(){return 0===this.high&&0===this.low},B.eqz=B.isZero,B.isNegative=function(){return!this.unsigned&&this.high<0},B.isPositive=function(){return this.unsigned||this.high>=0},B.isOdd=function(){return 1==(1&this.low)},B.isEven=function(){return 0==(1&this.low)},B.equals=function(t){return e(t)||(t=o(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},B.eq=B.equals,B.notEquals=function(t){return!this.eq(t)},B.neq=B.notEquals,B.ne=B.notEquals,B.lessThan=function(t){return this.comp(t)<0},B.lt=B.lessThan,B.lessThanOrEqual=function(t){return this.comp(t)<=0},B.lte=B.lessThanOrEqual,B.le=B.lessThanOrEqual,B.greaterThan=function(t){return this.comp(t)>0},B.gt=B.greaterThan,B.greaterThanOrEqual=function(t){return this.comp(t)>=0},B.gte=B.greaterThanOrEqual,B.ge=B.greaterThanOrEqual,B.compare=function(t){if(e(t)||(t=o(t)),this.eq(t))return 0;var i=this.isNegative(),n=t.isNegative();return i&&!n?-1:!i&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},B.comp=B.compare,B.negate=function(){return!this.unsigned&&this.eq(_)?_:this.not().add(y)},B.neg=B.negate,B.add=function(t){e(t)||(t=o(t));var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,u=t.high>>>16,g=65535&t.high,f=t.low>>>16,l=65535&t.low,a=0,d=0,c=0,v=0;return v+=s+l,c+=v>>>16,v&=65535,c+=r+f,d+=c>>>16,c&=65535,d+=n+g,a+=d>>>16,d&=65535,a+=i+u,a&=65535,h(c<<16|v,a<<16|d,this.unsigned)},B.subtract=function(t){return e(t)||(t=o(t)),this.add(t.neg())},B.sub=B.subtract,B.multiply=function(t){if(this.isZero())return m;if(e(t)||(t=o(t)),g){return h(g.mul(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(t.isZero())return m;if(this.eq(_))return t.isOdd()?_:m;if(t.eq(_))return this.isOdd()?_:m;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(w)&&t.lt(w))return s(this.toNumber()*t.toNumber(),this.unsigned);var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,u=65535&this.low,f=t.high>>>16,l=65535&t.high,a=t.low>>>16,d=65535&t.low,c=0,v=0,p=0,y=0;return y+=u*d,p+=y>>>16,y&=65535,p+=r*d,v+=p>>>16,p&=65535,p+=u*a,v+=p>>>16,p&=65535,v+=n*d,c+=v>>>16,v&=65535,v+=r*a,c+=v>>>16,v&=65535,v+=u*l,c+=v>>>16,v&=65535,c+=i*d+n*a+r*l+u*f,c&=65535,h(p<<16|y,c<<16|v,this.unsigned)},B.mul=B.multiply,B.divide=function(t){if(e(t)||(t=o(t)),t.isZero())throw Error("division by zero");if(g){if(!this.unsigned&&-2147483648===this.high&&-1===t.low&&-1===t.high)return this;return h((this.unsigned?g.div_u:g.div_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?p:m;var i,n,r;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return p;if(t.gt(this.shru(1)))return b;r=p}else{if(this.eq(_)){if(t.eq(y)||t.eq(N))return _;if(t.eq(_))return y;return i=this.shr(1).div(t).shl(1),i.eq(m)?t.isNegative()?y:N:(n=this.sub(t.mul(i)),r=i.add(n.div(t)))}if(t.eq(_))return this.unsigned?p:m;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();r=m}for(n=this;n.gte(t);){i=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var u=Math.ceil(Math.log(i)/Math.LN2),f=u<=48?1:a(2,u-48),l=s(i),d=l.mul(t);d.isNegative()||d.gt(n);)i-=f,l=s(i,this.unsigned),d=l.mul(t);l.isZero()&&(l=y),r=r.add(l),n=n.sub(d)}return r},B.div=B.divide,B.modulo=function(t){if(e(t)||(t=o(t)),g){return h((this.unsigned?g.rem_u:g.rem_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))},B.mod=B.modulo,B.rem=B.modulo,B.not=function(){return h(~this.low,~this.high,this.unsigned)},B.and=function(t){return e(t)||(t=o(t)),h(this.low&t.low,this.high&t.high,this.unsigned)},B.or=function(t){return e(t)||(t=o(t)),h(this.low|t.low,this.high|t.high,this.unsigned)},B.xor=function(t){return e(t)||(t=o(t)),h(this.low^t.low,this.high^t.high,this.unsigned)},B.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):h(0,this.low<<t-32,this.unsigned)},B.shl=B.shiftLeft,B.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):h(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},B.shr=B.shiftRight,B.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0===(t&=63))return this;var i=this.high;if(t<32){return h(this.low>>>t|i<<32-t,i>>>t,this.unsigned)}return 32===t?h(i,0,this.unsigned):h(i>>>t-32,0,this.unsigned)},B.shru=B.shiftRightUnsigned,B.shr_u=B.shiftRightUnsigned,B.toSigned=function(){return this.unsigned?h(this.low,this.high,!1):this},B.toUnsigned=function(){return this.unsigned?this:h(this.low,this.high,!0)},B.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},B.toBytesLE=function(){var t=this.high,i=this.low;return[255&i,i>>>8&255,i>>>16&255,i>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},B.toBytesBE=function(){var t=this.high,i=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,i>>>24,i>>>16&255,i>>>8&255,255&i]},n.fromBytes=function(t,i,e){return e?n.fromBytesLE(t,i):n.fromBytesBE(t,i)},n.fromBytesLE=function(t,i){return new n(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,i)},n.fromBytesBE=function(t,i){return new n(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],i)}}])});

/*
 * Wasabi loader (monkey-patches WebAssembly.instantiate()) and runtime (e.g., for resolving call_indirect).
 */

let Wasabi = {
    HOOK_NAMES: [
        "start",
        "if_",
        "br",
        "br_if",
        "br_table",
        "begin",
        "end",
        "nop",
        "unreachable",
        "drop",
        "select",
        "call_pre",
        "call_post",
        "return_",
        "const_",
        "unary",
        "binary",
        "load",
        "store",
        "memory_size",
        "memory_grow",
        "local",
        "global"
    ],

    // map a table index to a function index
    resolveTableIdx: function (tableIdx) {
        if (Wasabi.module.exports === undefined || Wasabi.module.table === undefined) {
            console.warn("cannot resolve table index without exports and table (possible reason: exports and table are not available during Wasm start function)");
            return undefined;
        }

        // FIXME even though MDN says "name property is the toString() result of the function's index in the wasm module"
        // Firefox seems to give out different names :/ -> bug report, either documentation or implementation is wrong
        // see https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions

        // dirty HACK subtract the "name index" of the first function, should correct for the wrong property
        // const firstFunctionIdx = parseInt(Wasabi.module.exports[Wasabi.module.info.firstFunctionExportName].name);
        // const functionIdx = parseInt(Wasabi.module.table.get(tableIdx).name) - firstFunctionIdx;
        const functionIdx = parseInt(Wasabi.module.table.get(tableIdx).name);

        return (functionIdx >= Wasabi.module.info.functions.length) ? 0 : functionIdx;
    },

    // call end hooks for all "intermediate" or "implicitly ended blocks" of a branch table
    endBrTableBlocks: function(brTablesInfoIdx, brTableIdx, func) {
        const table = Wasabi.module.info.brTables[brTablesInfoIdx].table;
        const default_ = Wasabi.module.info.brTables[brTablesInfoIdx].default;
        const target = (table[brTableIdx] === undefined) ? default_ : table[brTableIdx];

        // NOTE this is a JavaScript impl of the Wasabi to_end_hook_args() function in Rust
        for (const block of target.ends) {
            const [type, begin, end, begin_if] = block;
            Wasabi.analysis.end(
                {func, instr: end},
                type,
                {func, instr: begin},
                // not undefined only for block type "else"
                (begin_if === undefined) ? undefined : {func, instr: begin_if});
        }
    },

    loc2func: function(loc) {
        // TODO
    },

    loc2instr: function(loc) {
        // TODO
    },

    functionType: function(func) {
        // TODO
    },

    module: {
        // filled at instrumentation time
        // TODO flatten info into module itself, by using Object.assign in generated code
        info: undefined, lowlevelHooks: undefined,
        // filled after instantiation
        exports: undefined, table: undefined,
    },

    // filled by user or with empty hooks (as fallback) before instantiation
    analysis: {}
};

// monkey-patch WebAssembly.instantiate() and .instantiateStreaming() to add Wasabi
{
    // NOTE even though nothing is done with their arguments, we should provide them because it speeds up in Firefox
    // maybe because this way the JIT can inline the functions???
    const defaultHooks = {
        start(location) {},
        nop(location) {},
        unreachable(location) {},
        if_(location, condition) {},
        br(location, target) {},
        br_if(location, conditionalTarget, condition) {},
        br_table(location, table, defaultTarget, tableIdx) {},
        begin(location, type) {},
        end(location, type, beginLocation, ifLocation) {},
        drop(location, value) {},
        select(location, cond, first, second) {},
        call_pre(location, targetFunc, args, indirectTableIdx) {},
        call_post(location, values) {},
        return_(location, values) {},
        const_(location, op, value) {},
        unary(location, op, input, result) {},
        binary(location, op, first, second, result) {},
        load(location, op, memarg, value) {},
        store(location, op, memarg, value) {},
        memory_size(location, currentSizePages) {},
        memory_grow(location, byPages, previousSizePages) {},
        local(location, op, localIndex, value) {},
        global(location, op, globalIndex, value) {},
    }

    const assertInstantiationPrecondition = function() {
        if (Wasabi.module.info === undefined || Wasabi.module.lowlevelHooks === undefined) {
            throw "missing static info or low-level hooks, did you include the Wasabi-generated JavaScript file?";
        }
    }

    const importObjectWithHooks = function(importObject) {
        for (const hook of Wasabi.HOOK_NAMES) {
            if (Wasabi.analysis[hook] === undefined) {
                console.debug(hook, "hook not provided by Wasabi.analysis, add empty function as fallback");
                Wasabi.analysis[hook] = defaultHooks[hook];
            }
        }
        let importObjectWithHooks = importObject || {};
        importObjectWithHooks.__wasabi_hooks = Wasabi.module.lowlevelHooks;
        return importObjectWithHooks;
    }

    const wireInstanceExports = function(instance) {
        Wasabi.module.exports = instance.exports;
        Wasabi.module.table = instance.exports[Wasabi.module.info.tableExportName];
    }

    const oldInstantiate = WebAssembly.instantiate;
    WebAssembly.instantiate = (sourceBuffer, importObject) => {
        assertInstantiationPrecondition();
        const result = oldInstantiate(sourceBuffer, importObjectWithHooks(importObject));
        // as soon as instance is available, save exports and table
        result.then(({module, instance}) => {
            wireInstanceExports(instance);
        });
        return result;
    };

    // just fall-back to regular instantiation since Wasabi doesn't support streaming instrumentation (yet) anyway
    const oldInstantiateStreaming = WebAssembly.instantiateStreaming;
    WebAssembly.instantiateStreaming = async (source, importObject) => {
        let response = await source;
        let buffer = await response.arrayBuffer();
        return WebAssembly.instantiate(buffer, importObject);
    };

    const oldInstance = WebAssembly.Instance;
    const newInstance = function(module, importObject) {
        assertInstantiationPrecondition();
        const instance = new oldInstance(module, importObjectWithHooks(importObject));
        wireInstanceExports(instance);
        return instance;
    };
    WebAssembly.Instance = newInstance;
}


Wasabi.module.info = {"functions":[{"type":"iiii|","import":null,"export":[],"locals":"iiiiii","instrCount":557},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiii","instrCount":528},{"type":"iii|i","import":null,"export":[],"locals":"iiiiiiiiiiii","instrCount":476},{"type":"iiiiii|i","import":null,"export":[],"locals":"iiiii","instrCount":375},{"type":"ii|i","import":null,"export":[],"locals":"iiiiiiiii","instrCount":328},{"type":"iiiii|i","import":null,"export":[],"locals":"iiiiiiii","instrCount":297},{"type":"ii|i","import":null,"export":[],"locals":"iiiiI","instrCount":250},{"type":"iiiiiii|i","import":null,"export":[],"locals":"iiiiiii","instrCount":197},{"type":"Iii|i","import":null,"export":[],"locals":"iiiiiI","instrCount":171},{"type":"ii|i","import":null,"export":[],"locals":"ii","instrCount":168},{"type":"iiii|","import":null,"export":[],"locals":"ii","instrCount":161},{"type":"ii|i","import":null,"export":[],"locals":"iii","instrCount":160},{"type":"ii|","import":null,"export":[],"locals":"iiiii","instrCount":154},{"type":"ii|i","import":null,"export":[],"locals":"ii","instrCount":152},{"type":"iiii|","import":null,"export":[],"locals":"iiiii","instrCount":134},{"type":"ii|","import":null,"export":[],"locals":"iiii","instrCount":113},{"type":"iii|i","import":null,"export":[],"locals":"ii","instrCount":87},{"type":"iiii|","import":null,"export":[],"locals":"i","instrCount":85},{"type":"i|i","import":null,"export":[],"locals":"i","instrCount":78},{"type":"iiii|","import":null,"export":[],"locals":"iii","instrCount":68},{"type":"ii|","import":null,"export":[],"locals":"ii","instrCount":71},{"type":"iiii|","import":null,"export":[],"locals":"i","instrCount":60},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":63},{"type":"i|","import":null,"export":[],"locals":"iiiiI","instrCount":52},{"type":"ii|i","import":null,"export":[],"locals":"iii","instrCount":53},{"type":"iiiii|i","import":null,"export":[],"locals":"ii","instrCount":51},{"type":"iii|","import":null,"export":[],"locals":"i","instrCount":50},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":50},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":50},{"type":"ii|i","import":null,"export":[],"locals":"i","instrCount":48},{"type":"ii|i","import":null,"export":["check"],"locals":"ii","instrCount":42},{"type":"i|","import":null,"export":[],"locals":"iIII","instrCount":41},{"type":"iiii|i","import":null,"export":[],"locals":"i","instrCount":39},{"type":"ii|","import":null,"export":[],"locals":"iI","instrCount":30},{"type":"iii|i","import":null,"export":[],"locals":"i","instrCount":28},{"type":"iiiii|i","import":null,"export":[],"locals":"i","instrCount":26},{"type":"i|i","import":null,"export":["__wbindgen_malloc"],"locals":"","instrCount":27},{"type":"ii|","import":null,"export":[],"locals":"ii","instrCount":24},{"type":"iii|i","import":null,"export":[],"locals":"i","instrCount":22},{"type":"iii|i","import":null,"export":["__wbindgen_realloc"],"locals":"","instrCount":19},{"type":"i|","import":null,"export":[],"locals":"i","instrCount":19},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":18},{"type":"i|","import":null,"export":[],"locals":"i","instrCount":15},{"type":"|i","import":null,"export":[],"locals":"","instrCount":16},{"type":"iiiii|","import":null,"export":[],"locals":"","instrCount":13},{"type":"i|","import":null,"export":[],"locals":"i","instrCount":13},{"type":"ii|","import":null,"export":[],"locals":"i","instrCount":11},{"type":"iiii|","import":null,"export":[],"locals":"","instrCount":10},{"type":"iiii|i","import":null,"export":[],"locals":"i","instrCount":9},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":9},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":9},{"type":"iiii|i","import":null,"export":[],"locals":"","instrCount":7},{"type":"ii|i","import":null,"export":[],"locals":"i","instrCount":7},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":7},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":6},{"type":"iii|","import":null,"export":[],"locals":"","instrCount":6},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":6},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":6},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":5},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":5},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":5},{"type":"i|","import":null,"export":[],"locals":"","instrCount":4},{"type":"|","import":null,"export":[],"locals":"","instrCount":4},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":4},{"type":"|","import":null,"export":[],"locals":"","instrCount":3},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":3},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"ii|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|I","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|I","import":null,"export":[],"locals":"","instrCount":2},{"type":"|","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|i","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|I","import":null,"export":[],"locals":"","instrCount":2},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1},{"type":"ii|","import":null,"export":[],"locals":"","instrCount":1},{"type":"i|","import":null,"export":[],"locals":"","instrCount":1}],"globals":"i","start":null,"tableExportName":"__wasabi_table","brTables":[{"table":[{"label":5,"location":[6,99],"ends":[["block",38,41],["block",37,45],["block",18,49],["block",17,95],["block",16,96],["block",15,99]]},{"label":1,"location":[6,45],"ends":[["block",38,41],["block",37,45]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":0,"location":[6,41],"ends":[["block",38,41]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":3,"location":[6,95],"ends":[["block",38,41],["block",37,45],["block",18,49],["block",17,95]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":2,"location":[6,49],"ends":[["block",38,41],["block",37,45],["block",18,49]]},{"label":3,"location":[6,95],"ends":[["block",38,41],["block",37,45],["block",18,49],["block",17,95]]}],"default":{"label":5,"location":[6,99],"ends":[["block",38,41],["block",37,45],["block",18,49],["block",17,95],["block",16,96],["block",15,99]]}},{"table":[{"label":2,"location":[2,402],"ends":[["block",375,385],["block",374,391],["block",373,402]]},{"label":0,"location":[2,385],"ends":[["block",375,385]]},{"label":1,"location":[2,391],"ends":[["block",375,385],["block",374,391]]},{"label":0,"location":[2,385],"ends":[["block",375,385]]}],"default":{"label":2,"location":[2,402],"ends":[["block",375,385],["block",374,391],["block",373,402]]}},{"table":[{"label":1,"location":[6,222],"ends":[["block",112,115],["block",111,222]]},{"label":2,"location":[6,231],"ends":[["block",112,115],["block",111,222],["block",110,231]]},{"label":3,"location":[6,236],"ends":[["block",112,115],["block",111,222],["block",110,231],["block",109,236]]},{"label":0,"location":[6,115],"ends":[["block",112,115]]}],"default":{"label":1,"location":[6,222],"ends":[["block",112,115],["block",111,222]]}},{"table":[{"label":5,"location":[6,222],"ends":[["block",120,128],["block",119,138],["block",118,150],["block",117,162],["block",116,212],["block",111,222]]},{"label":4,"location":[6,212],"ends":[["block",120,128],["block",119,138],["block",118,150],["block",117,162],["block",116,212]]},{"label":3,"location":[6,162],"ends":[["block",120,128],["block",119,138],["block",118,150],["block",117,162]]},{"label":2,"location":[6,150],"ends":[["block",120,128],["block",119,138],["block",118,150]]},{"label":1,"location":[6,138],"ends":[["block",120,128],["block",119,138]]},{"label":0,"location":[6,128],"ends":[["block",120,128]]}],"default":{"label":5,"location":[6,222],"ends":[["block",120,128],["block",119,138],["block",118,150],["block",117,162],["block",116,212],["block",111,222]]}},{"table":[{"label":0,"location":[1,221],"ends":[["block",215,221]]},{"label":1,"location":[1,230],"ends":[["block",215,221],["block",214,230]]},{"label":2,"location":[1,268],"ends":[["block",215,221],["block",214,230],["block",213,268]]},{"label":3,"location":[1,296],"ends":[["block",215,221],["block",214,230],["block",213,268],["block",212,296]]}],"default":{"label":0,"location":[1,221],"ends":[["block",215,221]]}},{"table":[{"label":4,"location":[1,371],"ends":[["block",309,313],["block",308,322],["block",307,349],["block",306,365],["block",305,371]]},{"label":1,"location":[1,322],"ends":[["block",309,313],["block",308,322]]},{"label":0,"location":[1,313],"ends":[["block",309,313]]},{"label":6,"location":[1,380],"ends":[["block",309,313],["block",308,322],["block",307,349],["block",306,365],["block",305,371],["block",304,377],["block",303,380]]}],"default":{"label":4,"location":[1,371],"ends":[["block",309,313],["block",308,322],["block",307,349],["block",306,365],["block",305,371]]}},{"table":[{"label":2,"location":[3,174],"ends":[["block",147,157],["block",146,163],["block",145,174]]},{"label":0,"location":[3,157],"ends":[["block",147,157]]},{"label":1,"location":[3,163],"ends":[["block",147,157],["block",146,163]]},{"label":0,"location":[3,157],"ends":[["block",147,157]]}],"default":{"label":2,"location":[3,174],"ends":[["block",147,157],["block",146,163],["block",145,174]]}},{"table":[{"label":2,"location":[3,249],"ends":[["block",222,232],["block",221,238],["block",220,249]]},{"label":0,"location":[3,232],"ends":[["block",222,232]]},{"label":1,"location":[3,238],"ends":[["block",222,232],["block",221,238]]},{"label":0,"location":[3,232],"ends":[["block",222,232]]}],"default":{"label":2,"location":[3,249],"ends":[["block",222,232],["block",221,238],["block",220,249]]}}]};

Wasabi.module.lowlevelHooks = {
    "begin_function": function (func, instr, ) {
        Wasabi.analysis.begin({func, instr}, "function");
    },
    "local.get_i": function (func, instr, index, value) {
        Wasabi.analysis.local({func, instr}, "local.get", index, value);
    },
    "begin_block": function (func, instr, ) {
        Wasabi.analysis.begin({func, instr}, "block");
    },
    "global.get_i": function (func, instr, index, value) {
        Wasabi.analysis.global({func, instr}, "global.get", index, value);
    },
    "i32.const": function (func, instr, value) {
        Wasabi.analysis.const_({func, instr}, "i32.const", value);
    },
    "i32.load": function (func, instr, offset, align, addr, value) {
        Wasabi.analysis.load({func, instr}, "i32.load", {addr, offset, align}, value);
    },
    "local.tee_i": function (func, instr, index, value) {
        Wasabi.analysis.local({func, instr}, "local.tee", index, value);
    },
    "local.set_i": function (func, instr, index, value) {
        Wasabi.analysis.local({func, instr}, "local.set", index, value);
    },
    "i32.sub": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.sub", input0, input1, result0);
    },
    "global.set_i": function (func, instr, index, value) {
        Wasabi.analysis.global({func, instr}, "global.set", index, value);
    },
    "i32.eqz": function (func, instr, input0, result0) {
        Wasabi.analysis.unary({func, instr}, "i32.eqz", input0, result0);
    },
    "br_if": function (func, instr, condition, targetLabel, targetInstr) {
        Wasabi.analysis.br_if({func, instr}, {label: targetLabel, location: {func, instr: targetInstr}}, condition === 1);
    },
    "end_block": function (func, instr, beginInstr) {
        Wasabi.analysis.end({func, instr}, "block", {func, instr: beginInstr});
    },
    "i32.shl": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.shl", input0, input1, result0);
    },
    "i32.store": function (func, instr, offset, align, addr, value) {
        Wasabi.analysis.store({func, instr}, "i32.store", {addr, offset, align}, value);
    },
    "i64.load": function (func, instr, offset, align, addr, value_low, value_high) {
        Wasabi.analysis.load({func, instr}, "i64.load", {addr, offset, align}, new Long(value_low, value_high));
    },
    "local.set_I": function (func, instr, index, value_low, value_high) {
        Wasabi.analysis.local({func, instr}, "local.set", index, new Long(value_low, value_high));
    },
    "i32.add": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.add", input0, input1, result0);
    },
    "i32.eq": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.eq", input0, input1, result0);
    },
    "call_iiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [arg0, arg1, arg2, arg3]);
    },
    "call_post": function (func, instr, ) {
        Wasabi.analysis.call_post({func, instr}, []);
    },
    "unreachable": function (func, instr, ) {
        Wasabi.analysis.unreachable({func, instr}, );
    },
    "return": function (func, instr, ) {
        Wasabi.analysis.return_({func, instr}, []);
    },
    "end_function": function (func, instr, ) {
        Wasabi.analysis.end({func, instr}, "function", {func, instr: -1});
    },
    "i64.const": function (func, instr, value_low, value_high) {
        Wasabi.analysis.const_({func, instr}, "i64.const", new Long(value_low, value_high));
    },
    "i32.lt_u": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.lt_u", input0, input1, result0);
    },
    "i64.store": function (func, instr, offset, align, addr, value_low, value_high) {
        Wasabi.analysis.store({func, instr}, "i64.store", {addr, offset, align}, new Long(value_low, value_high));
    },
    "begin_loop": function (func, instr, ) {
        Wasabi.analysis.begin({func, instr}, "loop");
    },
    "i32.gt_u": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.gt_u", input0, input1, result0);
    },
    "select_ii": function (func, instr, condition, input0, input1) {
        Wasabi.analysis.select({func, instr}, condition === 1, input0, input1);
    },
    "i32.shr_u": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.shr_u", input0, input1, result0);
    },
    "memory.grow": function (func, instr, deltaPages, previousSizePages) {
	if (Wasabi.analysis.memory) {
            Wasabi.analysis.memory.grow({func, instr}, deltaPages, previousSizePages);
        }
    },
    "i32.ne": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.ne", input0, input1, result0);
    },
    "i32.and": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.and", input0, input1, result0);
    },
    "br": function (func, instr, targetLabel, targetInstr) {
        Wasabi.analysis.br({func, instr}, {label: targetLabel, location: {func, instr: targetInstr}});
    },
    "call_indirect_i": function (func, instr, tableIndex, arg0) {
        Wasabi.analysis.call_pre({func, instr}, Wasabi.resolveTableIdx(tableIndex), [arg0], tableIndex);
    },
    "call_post_i": function (func, instr, result0) {
        Wasabi.analysis.call_post({func, instr}, [result0]);
    },
    "local.get_I": function (func, instr, index, value_low, value_high) {
        Wasabi.analysis.local({func, instr}, "local.get", index, new Long(value_low, value_high));
    },
    "i32.ge_u": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.ge_u", input0, input1, result0);
    },
    "call_indirect_iii": function (func, instr, tableIndex, arg0, arg1, arg2) {
        Wasabi.analysis.call_pre({func, instr}, Wasabi.resolveTableIdx(tableIndex), [arg0, arg1, arg2], tableIndex);
    },
    "return_i": function (func, instr, result0) {
        Wasabi.analysis.return_({func, instr}, [result0]);
    },
    "call_iii": function (func, instr, targetFunc, arg0, arg1, arg2) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [arg0, arg1, arg2]);
    },
    "call_ii": function (func, instr, targetFunc, arg0, arg1) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [arg0, arg1]);
    },
    "i32.load8_s": function (func, instr, offset, align, addr, value) {
        Wasabi.analysis.load({func, instr}, "i32.load8_s", {addr, offset, align}, value);
    },
    "i32.or": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.or", input0, input1, result0);
    },
    "drop_i": function (func, instr, value) {
        Wasabi.analysis.drop({func, instr}, value);
    },
    "i32.le_s": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.le_s", input0, input1, result0);
    },
    "end_loop": function (func, instr, beginInstr) {
        Wasabi.analysis.end({func, instr}, "loop", {func, instr: beginInstr});
    },
    "i32.load8_u": function (func, instr, offset, align, addr, value) {
        Wasabi.analysis.load({func, instr}, "i32.load8_u", {addr, offset, align}, value);
    },
    "call_indirect_ii": function (func, instr, tableIndex, arg0, arg1) {
        Wasabi.analysis.call_pre({func, instr}, Wasabi.resolveTableIdx(tableIndex), [arg0, arg1], tableIndex);
    },
    "i32.gt_s": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.gt_s", input0, input1, result0);
    },
    "call_i": function (func, instr, targetFunc, arg0) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [arg0]);
    },
    "i32.le_u": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.le_u", input0, input1, result0);
    },
    "i32.lt_s": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.lt_s", input0, input1, result0);
    },
    "i32.store8": function (func, instr, offset, align, addr, value) {
        Wasabi.analysis.store({func, instr}, "i32.store8", {addr, offset, align}, value);
    },
    "call_iiiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3, arg4) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [arg0, arg1, arg2, arg3, arg4]);
    },
    "i32.ge_s": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.ge_s", input0, input1, result0);
    },
    "i64.load32_u": function (func, instr, offset, align, addr, value_low, value_high) {
        Wasabi.analysis.load({func, instr}, "i64.load32_u", {addr, offset, align}, new Long(value_low, value_high));
    },
    "call_Iii": function (func, instr, targetFunc, arg0_low, arg0_high, arg1, arg2) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [new Long(arg0_low, arg0_high), arg1, arg2]);
    },
    "i64.extend_i32_u": function (func, instr, input0, result0_low, result0_high) {
        Wasabi.analysis.unary({func, instr}, "i64.extend_i32_u", input0, new Long(result0_low, result0_high));
    },
    "call": function (func, instr, targetFunc) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, []);
    },
    "call_iiiiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3, arg4, arg5) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [arg0, arg1, arg2, arg3, arg4, arg5]);
    },
    "return_I": function (func, instr, result0_low, result0_high) {
        Wasabi.analysis.return_({func, instr}, [new Long(result0_low, result0_high)]);
    },
    "call_indirect_iiii": function (func, instr, tableIndex, arg0, arg1, arg2, arg3) {
        Wasabi.analysis.call_pre({func, instr}, Wasabi.resolveTableIdx(tableIndex), [arg0, arg1, arg2, arg3], tableIndex);
    },
    "call_iiiiiii": function (func, instr, targetFunc, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
        Wasabi.analysis.call_pre({func, instr}, targetFunc, [arg0, arg1, arg2, arg3, arg4, arg5, arg6]);
    },
    "br_table": function (func, instr, tableIdx, brTablesInfoIdx) {
        Wasabi.analysis.br_table({func, instr}, Wasabi.module.info.brTables[brTablesInfoIdx].table, Wasabi.module.info.brTables[brTablesInfoIdx].default, tableIdx); Wasabi.endBrTableBlocks(brTablesInfoIdx, tableIdx, func);
    },
    "i32.mul": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.mul", input0, input1, result0);
    },
    "i32.clz": function (func, instr, input0, result0) {
        Wasabi.analysis.unary({func, instr}, "i32.clz", input0, result0);
    },
    "i32.xor": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.xor", input0, input1, result0);
    },
    "i64.or": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.or", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "i64.shr_u": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.shr_u", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "i32.wrap_i64": function (func, instr, input0_low, input0_high, result0) {
        Wasabi.analysis.unary({func, instr}, "i32.wrap_i64", new Long(input0_low, input0_high), result0);
    },
    "i64.and": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.and", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "i64.add": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.add", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "i64.shl": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.shl", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "i64.ne": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0) {
        Wasabi.analysis.binary({func, instr}, "i64.ne", new Long(input0_low, input0_high), new Long(input1_low, input1_high), result0);
    },
    "i64.ge_u": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0) {
        Wasabi.analysis.binary({func, instr}, "i64.ge_u", new Long(input0_low, input0_high), new Long(input1_low, input1_high), result0);
    },
    "i64.div_u": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.div_u", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "local.tee_I": function (func, instr, index, value_low, value_high) {
        Wasabi.analysis.local({func, instr}, "local.tee", index, new Long(value_low, value_high));
    },
    "i64.mul": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.mul", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "i64.sub": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0_low, result0_high) {
        Wasabi.analysis.binary({func, instr}, "i64.sub", new Long(input0_low, input0_high), new Long(input1_low, input1_high), new Long(result0_low, result0_high));
    },
    "i32.div_u": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.div_u", input0, input1, result0);
    },
    "i32.load16_u": function (func, instr, offset, align, addr, value) {
        Wasabi.analysis.load({func, instr}, "i32.load16_u", {addr, offset, align}, value);
    },
    "i32.store16": function (func, instr, offset, align, addr, value) {
        Wasabi.analysis.store({func, instr}, "i32.store16", {addr, offset, align}, value);
    },
    "i64.gt_u": function (func, instr, input0_low, input0_high, input1_low, input1_high, result0) {
        Wasabi.analysis.binary({func, instr}, "i64.gt_u", new Long(input0_low, input0_high), new Long(input1_low, input1_high), result0);
    },
    "i32.shr_s": function (func, instr, input0, input1, result0) {
        Wasabi.analysis.binary({func, instr}, "i32.shr_s", input0, input1, result0);
    },
};
